export type Project = {
  id: number
  title: string
  description: string
  image: string
  link: string
  tags: string[]
  category: string
  detailedDescription?: string
  features?: string[]
  technologies?: string[]
  challenges?: string[]
  solutions?: string[]
  screenshots?: string[]
}

export const projects: Project[] = [
  {
    id: 1,
    title: "E-commerce Platform",
    description: "A full-stack e-commerce platform built with Next.js, Prisma, and Stripe integration.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Next.js", "Prisma", "Stripe"],
    category: "Web Development",
    detailedDescription:
      "This e-commerce platform provides a complete solution for online stores, featuring product management, shopping cart functionality, secure checkout with Stripe, and a responsive design that works across all devices.",
    features: [
      "User authentication and account management",
      "Product catalog with categories and search",
      "Shopping cart and wishlist functionality",
      "Secure payment processing with Stripe",
      "Order tracking and history",
      "Admin dashboard for inventory management",
    ],
    technologies: [
      "Next.js for frontend and API routes",
      "Prisma ORM for database operations",
      "PostgreSQL database for data storage",
      "Stripe API for payment processing",
      "TailwindCSS for styling",
      "NextAuth.js for authentication",
    ],
    challenges: [
      "Implementing real-time inventory updates",
      "Ensuring secure payment processing",
      "Optimizing database queries for performance",
      "Building a responsive design for all devices",
    ],
    solutions: [
      "Used WebSockets for real-time inventory updates",
      "Implemented Stripe's secure checkout process",
      "Optimized database queries with proper indexing",
      "Used TailwindCSS for responsive design",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 2,
    title: "Task Management App",
    description: "A real-time task management application with team collaboration features.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["React", "Node.js", "Socket.io"],
    category: "Web Development",
    detailedDescription:
      "This task management application helps teams organize their work with real-time updates, task assignments, due dates, and progress tracking. It features a drag-and-drop interface for easy task management.",
    features: [
      "Real-time task updates across all team members",
      "Drag-and-drop task organization",
      "Task assignment and due date tracking",
      "Comment threads on tasks",
      "File attachments",
      "Email notifications for task updates",
    ],
    technologies: [
      "React for the frontend UI",
      "Node.js and Express for the backend",
      "Socket.io for real-time updates",
      "MongoDB for data storage",
      "AWS S3 for file storage",
      "SendGrid for email notifications",
    ],
    challenges: [
      "Implementing real-time updates without performance issues",
      "Building a smooth drag-and-drop interface",
      "Managing complex state across multiple users",
      "Ensuring data consistency with concurrent edits",
    ],
    solutions: [
      "Used Socket.io for efficient real-time communication",
      "Implemented React DnD for drag-and-drop functionality",
      "Used Redux for state management",
      "Implemented optimistic UI updates with server validation",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 3,
    title: "AI Chat Interface",
    description: "An AI-powered chat interface with natural language processing capabilities.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["OpenAI", "Next.js", "TailwindCSS"],
    category: "AI/ML",
    detailedDescription:
      "This AI chat interface leverages OpenAI's GPT models to provide intelligent responses to user queries. It features a clean, intuitive interface with conversation history, context awareness, and customizable AI personalities.",
    features: [
      "Natural language processing with GPT models",
      "Conversation history and context awareness",
      "Customizable AI personalities",
      "Voice input and output options",
      "Multi-language support",
      "Exportable conversation logs",
    ],
    technologies: [
      "Next.js for the frontend and API routes",
      "OpenAI API for natural language processing",
      "TailwindCSS for styling",
      "Web Speech API for voice input/output",
      "Vercel AI SDK for streaming responses",
      "Supabase for user data storage",
    ],
    challenges: [
      "Managing API costs with high usage",
      "Implementing efficient streaming of AI responses",
      "Maintaining context across long conversations",
      "Ensuring privacy and data security",
    ],
    solutions: [
      "Implemented token counting and usage limits",
      "Used server-sent events for efficient streaming",
      "Developed a context window management system",
      "Implemented end-to-end encryption for conversations",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 4,
    title: "Mobile Fitness Tracker",
    description: "A cross-platform mobile app for tracking workouts and nutrition.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["React Native", "Firebase", "Redux"],
    category: "Mobile App Development",
    detailedDescription:
      "This mobile fitness tracker helps users monitor their workouts, nutrition, and progress towards fitness goals. It includes workout plans, nutrition tracking, progress charts, and social features for sharing achievements.",
    features: [
      "Customizable workout plans and routines",
      "Nutrition tracking with calorie and macro counting",
      "Progress tracking with charts and statistics",
      "Social sharing of achievements",
      "Integration with fitness wearables",
      "Offline mode for tracking without internet",
    ],
    technologies: [
      "React Native for cross-platform mobile development",
      "Firebase for backend services and authentication",
      "Redux for state management",
      "Cloud Firestore for data storage",
      "Victory Native for data visualization",
      "Google Fit and Apple HealthKit integration",
    ],
    challenges: [
      "Ensuring consistent experience across iOS and Android",
      "Implementing accurate fitness tracking algorithms",
      "Managing offline data synchronization",
      "Optimizing battery usage with background tracking",
    ],
    solutions: [
      "Used platform-specific code where necessary",
      "Developed and tested custom tracking algorithms",
      "Implemented robust offline-first architecture",
      "Optimized background processes for battery efficiency",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 5,
    title: "Data Visualization Dashboard",
    description: "An interactive dashboard for visualizing complex datasets using D3.js.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["D3.js", "React", "Node.js"],
    category: "Data Science",
    detailedDescription:
      "This data visualization dashboard transforms complex datasets into interactive, insightful visualizations. It features customizable charts, real-time data updates, and advanced filtering options for data exploration.",
    features: [
      "Interactive charts and graphs with D3.js",
      "Real-time data updates",
      "Advanced filtering and sorting options",
      "Data export in multiple formats",
      "Customizable dashboard layouts",
      "Shareable visualization links",
    ],
    technologies: [
      "D3.js for data visualization",
      "React for UI components",
      "Node.js and Express for the backend",
      "MongoDB for data storage",
      "Socket.io for real-time updates",
      "CSV and JSON parsing libraries",
    ],
    challenges: [
      "Handling large datasets without performance issues",
      "Creating responsive visualizations for all screen sizes",
      "Implementing complex interactive features",
      "Ensuring accessibility of data visualizations",
    ],
    solutions: [
      "Implemented data sampling and pagination",
      "Used responsive design patterns for visualizations",
      "Developed reusable interaction components",
      "Added ARIA attributes and keyboard navigation",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 6,
    title: "Blockchain Voting System",
    description: "A secure and transparent voting system built on Ethereum blockchain.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Solidity", "Web3.js", "React"],
    category: "Blockchain",
    detailedDescription:
      "This blockchain-based voting system ensures secure, transparent, and tamper-proof elections. It uses Ethereum smart contracts to record votes, verify voter eligibility, and provide a public audit trail of all voting activity.",
    features: [
      "Secure voter authentication and verification",
      "Tamper-proof vote recording on the blockchain",
      "Real-time vote counting and results",
      "Public audit trail of all voting activity",
      "Support for different voting methods",
      "Voter privacy protection",
    ],
    technologies: [
      "Solidity for smart contract development",
      "Web3.js for blockchain interaction",
      "React for the frontend interface",
      "MetaMask for wallet integration",
      "IPFS for decentralized storage",
      "Zero-knowledge proofs for voter privacy",
    ],
    challenges: [
      "Ensuring voter privacy while maintaining transparency",
      "Managing gas costs for blockchain transactions",
      "Creating a user-friendly interface for blockchain interaction",
      "Preventing double voting and fraud",
    ],
    solutions: [
      "Implemented zero-knowledge proofs for private voting",
      "Optimized smart contracts for gas efficiency",
      "Designed an intuitive UI that abstracts blockchain complexity",
      "Used cryptographic techniques to prevent fraud",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 7,
    title: "IoT Home Automation",
    description: "A Raspberry Pi-based system for controlling smart home devices.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Python", "Raspberry Pi", "MQTT"],
    category: "IoT",
    detailedDescription:
      "This IoT home automation system allows users to control and monitor their smart home devices from anywhere. Built on Raspberry Pi, it integrates with various sensors and actuators to automate lighting, climate control, security, and more.",
    features: [
      "Remote control of smart home devices",
      "Automated routines based on time, presence, or conditions",
      "Energy usage monitoring and optimization",
      "Security system with motion detection and alerts",
      "Voice control integration with virtual assistants",
      "Mobile app for remote access",
    ],
    technologies: [
      "Python for backend logic",
      "Raspberry Pi as the central hub",
      "MQTT for device communication",
      "Node-RED for visual programming",
      "React Native for the mobile app",
      "TensorFlow Lite for edge AI capabilities",
    ],
    challenges: [
      "Integrating diverse smart home protocols and devices",
      "Ensuring system reliability and fault tolerance",
      "Implementing secure remote access",
      "Optimizing for low power consumption",
    ],
    solutions: [
      "Developed adapters for different smart home protocols",
      "Implemented redundancy and failover mechanisms",
      "Used end-to-end encryption for remote access",
      "Optimized code and hardware for energy efficiency",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 8,
    title: "AR Product Visualizer",
    description: "An augmented reality app for visualizing products in real-world environments.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["ARKit", "Swift", "SceneKit"],
    category: "Mobile App Development",
    detailedDescription:
      "This augmented reality application allows users to visualize products in their real-world environment before purchasing. It features realistic 3D models, accurate scaling, and interactive product customization.",
    features: [
      "Real-time product placement in AR",
      "Accurate size and scale representation",
      "Interactive product customization",
      "Realistic lighting and shadows",
      "Product information overlay",
      "Screenshot and sharing capabilities",
    ],
    technologies: [
      "ARKit for iOS augmented reality",
      "Swift for iOS development",
      "SceneKit for 3D rendering",
      "PBR materials for realistic appearance",
      "Core ML for object recognition",
      "Firebase for backend services",
    ],
    challenges: [
      "Creating realistic 3D product models",
      "Ensuring accurate product scaling and placement",
      "Optimizing performance on mobile devices",
      "Handling various lighting conditions",
    ],
    solutions: [
      "Developed a pipeline for converting CAD models to optimized AR assets",
      "Implemented surface detection and measurement algorithms",
      "Used level-of-detail techniques for performance optimization",
      "Created adaptive lighting models for different environments",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 9,
    title: "Social Media Analytics Tool",
    description: "A web application for analyzing and visualizing social media engagement metrics.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Python", "Django", "Pandas"],
    category: "Data Science",
    detailedDescription:
      "This social media analytics tool helps businesses understand their social media performance across multiple platforms. It collects, analyzes, and visualizes engagement metrics, audience demographics, and content performance.",
    features: [
      "Multi-platform social media data integration",
      "Customizable dashboards and reports",
      "Audience demographic analysis",
      "Content performance metrics",
      "Competitor analysis",
      "Scheduled reporting and alerts",
    ],
    technologies: [
      "Python for data processing",
      "Django for web framework",
      "Pandas and NumPy for data analysis",
      "Matplotlib and Plotly for visualization",
      "Celery for background tasks",
      "Redis for caching",
    ],
    challenges: [
      "Integrating with multiple social media APIs",
      "Processing and analyzing large volumes of data",
      "Creating meaningful visualizations of complex metrics",
      "Handling rate limits and API changes",
    ],
    solutions: [
      "Built a unified API client with platform-specific adapters",
      "Implemented efficient data processing pipelines",
      "Developed custom visualization components",
      "Created a robust API request management system",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 10,
    title: "Multiplayer Game Server",
    description: "A high-performance game server for a multiplayer online battle arena game.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["C++", "Boost.Asio", "PostgreSQL"],
    category: "Game Development",
    detailedDescription:
      "This multiplayer game server powers a fast-paced online battle arena game, handling real-time player interactions, game state management, matchmaking, and persistent player data storage.",
    features: [
      "Low-latency real-time gameplay",
      "Scalable architecture for thousands of concurrent players",
      "Sophisticated matchmaking system",
      "Anti-cheat mechanisms",
      "Leaderboards and player statistics",
      "In-game economy and transactions",
    ],
    technologies: [
      "C++ for high-performance server code",
      "Boost.Asio for networking",
      "PostgreSQL for persistent data storage",
      "Redis for caching and pub/sub",
      "Docker for containerization",
      "Kubernetes for orchestration",
    ],
    challenges: [
      "Minimizing latency for real-time gameplay",
      "Scaling to handle thousands of concurrent players",
      "Preventing cheating and exploits",
      "Managing complex game state synchronization",
    ],
    solutions: [
      "Implemented a custom UDP-based protocol",
      "Designed a horizontally scalable microservices architecture",
      "Developed server-authoritative validation systems",
      "Created an efficient delta-based state synchronization system",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 11,
    title: "Crypto Trading Bot",
    description: "An automated trading bot for cryptocurrency exchanges using machine learning.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Python", "TensorFlow", "ccxt"],
    category: "AI/ML",
    detailedDescription:
      "This cryptocurrency trading bot uses machine learning algorithms to analyze market trends and execute automated trading strategies. It features backtesting capabilities, risk management, and support for multiple exchanges.",
    features: [
      "Automated trading strategy execution",
      "Machine learning-based market prediction",
      "Strategy backtesting with historical data",
      "Risk management and position sizing",
      "Multi-exchange support",
      "Real-time performance monitoring",
    ],
    technologies: [
      "Python for core functionality",
      "TensorFlow for machine learning models",
      "ccxt for exchange API integration",
      "Pandas for data analysis",
      "PostgreSQL for data storage",
      "Docker for deployment",
    ],
    challenges: [
      "Developing profitable trading strategies",
      "Managing risk in volatile markets",
      "Handling exchange API limitations",
      "Ensuring system reliability for 24/7 operation",
    ],
    solutions: [
      "Implemented ensemble machine learning models",
      "Developed sophisticated risk management algorithms",
      "Created a robust API rate limiting system",
      "Built redundancy and monitoring into the system",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 12,
    title: "Virtual Reality Museum Tour",
    description: "A VR experience allowing users to explore famous museums from home.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Unity", "C#", "Oculus SDK"],
    category: "VR/AR",
    detailedDescription:
      "This virtual reality application offers immersive tours of famous museums around the world. Users can explore galleries, view high-resolution artwork, and learn about exhibits through interactive information displays.",
    features: [
      "Photorealistic 3D museum environments",
      "High-resolution artwork viewing",
      "Interactive exhibit information",
      "Guided tours with audio narration",
      "Social features for group visits",
      "Virtual events and exhibitions",
    ],
    technologies: [
      "Unity for VR development",
      "C# for programming",
      "Oculus SDK for VR integration",
      "Photogrammetry for 3D scanning",
      "WebRTC for social features",
      "Azure for cloud services",
    ],
    challenges: [
      "Creating photorealistic environments with good performance",
      "Digitizing artwork with high fidelity",
      "Designing intuitive VR navigation",
      "Managing large asset sizes",
    ],
    solutions: [
      "Used LOD techniques and optimized materials",
      "Developed a custom high-resolution texture streaming system",
      "Conducted extensive user testing for navigation design",
      "Implemented asset streaming and compression",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 13,
    title: "Serverless Image Processing",
    description: "A serverless application for real-time image processing and optimization.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["AWS Lambda", "Python", "Pillow"],
    category: "Cloud Computing",
    detailedDescription:
      "This serverless application provides on-demand image processing and optimization services. It automatically resizes, formats, compresses, and enhances images for optimal web and mobile delivery.",
    features: [
      "On-demand image resizing and cropping",
      "Format conversion and optimization",
      "Content-aware cropping",
      "Watermarking and text overlay",
      "Face detection and smart cropping",
      "CDN integration for fast delivery",
    ],
    technologies: [
      "AWS Lambda for serverless functions",
      "Python for image processing logic",
      "Pillow and OpenCV for image manipulation",
      "Amazon S3 for storage",
      "Amazon API Gateway for API endpoints",
      "CloudFront for content delivery",
    ],
    challenges: [
      "Processing large images within Lambda constraints",
      "Minimizing cold start times",
      "Handling high-volume requests",
      "Ensuring consistent image quality",
    ],
    solutions: [
      "Implemented streaming processing for large images",
      "Used provisioned concurrency for critical functions",
      "Designed for horizontal scaling with queue-based processing",
      "Developed quality-preserving optimization algorithms",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 14,
    title: "Peer-to-Peer File Sharing",
    description: "A decentralized file sharing application using peer-to-peer networking.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Go", "LibP2P", "Protocol Buffers"],
    category: "Networking",
    detailedDescription:
      "This peer-to-peer file sharing application allows users to share files directly without relying on centralized servers. It features encrypted transfers, distributed content discovery, and resilient networking.",
    features: [
      "Decentralized file discovery and sharing",
      "End-to-end encrypted transfers",
      "NAT traversal for direct connections",
      "Resumable file transfers",
      "Distributed hash table for content indexing",
      "Bandwidth throttling and prioritization",
    ],
    technologies: [
      "Go for performance and concurrency",
      "LibP2P for peer-to-peer networking",
      "Protocol Buffers for data serialization",
      "IPFS for content addressing",
      "WebRTC for browser support",
      "Electron for desktop application",
    ],
    challenges: [
      "Implementing NAT traversal for direct connections",
      "Creating a reliable distributed content index",
      "Ensuring security and privacy",
      "Handling network instability",
    ],
    solutions: [
      "Used STUN/TURN servers and hole punching techniques",
      "Implemented a Kademlia DHT for content indexing",
      "Developed an end-to-end encryption system",
      "Created a robust transfer protocol with error recovery",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 15,
    title: "Automated Code Review Tool",
    description: "A tool for automating code reviews using static analysis and machine learning.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Python", "AST", "scikit-learn"],
    category: "Developer Tools",
    detailedDescription:
      "This automated code review tool helps development teams maintain code quality by automatically analyzing code for bugs, security vulnerabilities, and style issues. It integrates with CI/CD pipelines and provides actionable feedback.",
    features: [
      "Static code analysis for multiple languages",
      "Machine learning-based bug prediction",
      "Security vulnerability detection",
      "Code style and best practice enforcement",
      "CI/CD integration",
      "Historical quality metrics and trends",
    ],
    technologies: [
      "Python for core functionality",
      "Abstract Syntax Tree parsing for code analysis",
      "scikit-learn for machine learning models",
      "GitHub API for integration",
      "Docker for containerization",
      "PostgreSQL for data storage",
    ],
    challenges: [
      "Supporting multiple programming languages",
      "Reducing false positives in analysis",
      "Providing actionable, contextual feedback",
      "Scaling to handle large codebases",
    ],
    solutions: [
      "Developed language-specific analyzers with a common interface",
      "Trained models on manually reviewed code samples",
      "Created context-aware suggestion generation",
      "Implemented incremental analysis for large codebases",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 16,
    title: "Cross-platform Desktop Music Player",
    description: "A feature-rich music player application built with Electron.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Electron", "React", "Node.js"],
    category: "Desktop App Development",
    detailedDescription:
      "This cross-platform desktop music player offers a modern, feature-rich alternative to traditional music applications. It supports various audio formats, playlist management, audio visualization, and integration with online music services.",
    features: [
      "Support for multiple audio formats",
      "Advanced playlist management",
      "Audio visualization and equalizer",
      "Lyrics display and synchronization",
      "Integration with online music services",
      "Last.fm scrobbling and music recommendations",
    ],
    technologies: [
      "Electron for cross-platform desktop development",
      "React for UI components",
      "Node.js for backend functionality",
      "Web Audio API for audio processing",
      "SQLite for local database",
      "FFmpeg for audio conversion",
    ],
    challenges: [
      "Ensuring consistent audio playback across platforms",
      "Managing memory usage with large music libraries",
      "Creating smooth audio visualizations",
      "Handling various metadata formats",
    ],
    solutions: [
      "Used platform-specific audio backends when necessary",
      "Implemented virtual list rendering for large libraries",
      "Optimized visualization algorithms for performance",
      "Developed a unified metadata parsing system",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 17,
    title: "Real-time Collaborative Whiteboard",
    description: "A web-based collaborative whiteboard for remote teams.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["React", "WebSocket", "Canvas API"],
    category: "Web Development",
    detailedDescription:
      "This real-time collaborative whiteboard enables remote teams to brainstorm, plan, and visualize ideas together. It features drawing tools, sticky notes, shape creation, and real-time cursor tracking for all participants.",
    features: [
      "Real-time drawing and editing",
      "Multiple drawing tools and shapes",
      "Text and sticky note creation",
      "User cursor tracking",
      "Infinite canvas with zooming and panning",
      "Session recording and playback",
    ],
    technologies: [
      "React for UI components",
      "Canvas API for drawing functionality",
      "WebSocket for real-time communication",
      "Redis for pub/sub messaging",
      "MongoDB for data persistence",
      "AWS S3 for session recording storage",
    ],
    challenges: [
      "Implementing smooth real-time collaboration",
      "Managing complex drawing state",
      "Handling network latency and disconnections",
      "Creating an infinite canvas with good performance",
    ],
    solutions: [
      "Used Operational Transformation for conflict resolution",
      "Developed a custom state management system",
      "Implemented reconnection and state synchronization",
      "Created a virtualized canvas rendering system",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
  {
    id: 18,
    title: "Natural Language Query Interface",
    description: "An interface for querying databases using natural language processing.",
    image: "/placeholder.svg?height=400&width=600",
    link: "https://github.com",
    tags: ["Python", "NLTK", "SQLAlchemy"],
    category: "AI/ML",
    detailedDescription:
      "This natural language query interface allows users to query databases using plain English questions instead of SQL. It uses NLP techniques to understand user intent and translate questions into optimized database queries.",
    features: [
      "Natural language to SQL translation",
      "Support for complex queries and joins",
      "Query suggestion and autocomplete",
      "Results visualization and export",
      "Query history and favorites",
      "Database schema learning and adaptation",
    ],
    technologies: [
      "Python for backend logic",
      "NLTK and spaCy for natural language processing",
      "SQLAlchemy for database abstraction",
      "React for frontend interface",
      "PostgreSQL for metadata storage",
      "Docker for deployment",
    ],
    challenges: [
      "Accurately parsing natural language questions",
      "Generating correct SQL for complex queries",
      "Handling ambiguity in user questions",
      "Supporting different database dialects",
    ],
    solutions: [
      "Combined rule-based parsing with machine learning",
      "Developed a query generation engine with validation",
      "Implemented clarification prompts for ambiguous queries",
      "Created database-specific query generators",
    ],
    screenshots: [
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
      "/placeholder.svg?height=600&width=800",
    ],
  },
]

